{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "docs/bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/src_chat_ts.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/src_game-main_ts.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/src_login_ts.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/src_player-list_ts.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/src_starting-page_ts.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/src_store-service_ts.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/src_winner-page_ts.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/vendors-node_modules_date-fns__lib_getTimezoneOffsetInMilliseconds_js-node_modules_date-fns_c-f1b57b.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/vendors-node_modules_date-fns_formatDistanceToNow_js.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/vendors-node_modules_date-fns_format_js-node_modules_date-fns_isToday_js.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "docs/vendors-node_modules_firebase_app_dist_esm_index_esm_js-node_modules_firebase_auth_dist_esm_i-d79ff4.bundle.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/app.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "App",
          "members": [
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string"
              },
              "default": "'My game'",
              "attribute": "header"
            }
          ],
          "attributes": [
            {
              "name": "header",
              "type": {
                "text": "string"
              },
              "default": "'My game'",
              "fieldName": "header"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "game-app",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "App",
          "declaration": {
            "name": "App",
            "module": "src/app.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "game-app",
          "declaration": {
            "name": "App",
            "module": "src/app.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Card",
          "members": [
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "default": "id"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "content"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "color"
            },
            {
              "kind": "method",
              "name": "getOppositeColor"
            },
            {
              "kind": "method",
              "name": "toJSON"
            },
            {
              "kind": "method",
              "name": "fromJSON",
              "static": true,
              "parameters": [
                {
                  "name": "json",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "src/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/chat.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Chat",
          "members": [
            {
              "kind": "field",
              "name": "user",
              "attribute": "user"
            },
            {
              "kind": "field",
              "name": "messages",
              "type": {
                "text": "Array<{ user: string, text: string, timestamp: Timestamp, timestampFormatted: string }>"
              },
              "default": "[]",
              "attribute": "messages"
            },
            {
              "kind": "field",
              "name": "messageText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "messageText"
            },
            {
              "kind": "method",
              "name": "loadMessages"
            },
            {
              "kind": "method",
              "name": "sendMessage"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "user",
              "fieldName": "user"
            },
            {
              "name": "messages",
              "type": {
                "text": "Array<{ user: string, text: string, timestamp: Timestamp, timestampFormatted: string }>"
              },
              "default": "[]",
              "fieldName": "messages"
            },
            {
              "name": "messageText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "messageText"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "game-chat",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Chat",
          "declaration": {
            "name": "Chat",
            "module": "src/chat.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "game-chat",
          "declaration": {
            "name": "Chat",
            "module": "src/chat.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/firebase.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "app"
        },
        {
          "kind": "variable",
          "name": "auth"
        },
        {
          "kind": "variable",
          "name": "db"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "app",
          "declaration": {
            "name": "app",
            "module": "src/firebase.ts"
          }
        },
        {
          "kind": "js",
          "name": "auth",
          "declaration": {
            "name": "auth",
            "module": "src/firebase.ts"
          }
        },
        {
          "kind": "js",
          "name": "db",
          "declaration": {
            "name": "db",
            "module": "src/firebase.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/game-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GameCard",
          "members": [
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "id"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "color"
            },
            {
              "kind": "field",
              "name": "backgroundColor",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "backgroundColor"
            },
            {
              "kind": "field",
              "name": "left",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "left"
            },
            {
              "kind": "field",
              "name": "zindex",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "zindex"
            },
            {
              "kind": "field",
              "name": "isselected",
              "type": {
                "text": "string"
              },
              "default": "\"false\"",
              "attribute": "isselected"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "getDescription"
            }
          ],
          "events": [
            {
              "name": "game-card-click",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "id",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "id"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "description"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "color"
            },
            {
              "name": "backgroundColor",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "backgroundColor"
            },
            {
              "name": "left",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "left"
            },
            {
              "name": "zindex",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "zindex"
            },
            {
              "name": "isselected",
              "type": {
                "text": "string"
              },
              "default": "\"false\"",
              "fieldName": "isselected"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "game-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GameCard",
          "declaration": {
            "name": "GameCard",
            "module": "src/game-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "game-card",
          "declaration": {
            "name": "GameCard",
            "module": "src/game-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/game-main.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GameMain",
          "members": [
            {
              "kind": "field",
              "name": "currentCardId",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "currentGame",
              "default": "new Game('')"
            },
            {
              "kind": "method",
              "name": "handleCardClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findCardContent",
              "parameters": [
                {
                  "name": "cardId",
                  "type": {
                    "text": "String"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleStopGame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleLeaveGame"
            },
            {
              "kind": "method",
              "name": "loadGame"
            },
            {
              "kind": "method",
              "name": "findMasterName"
            },
            {
              "kind": "method",
              "name": "findPlayers"
            },
            {
              "kind": "method",
              "name": "isMaster"
            },
            {
              "kind": "method",
              "name": "isPlayer"
            },
            {
              "kind": "method",
              "name": "getPlayer"
            },
            {
              "kind": "method",
              "name": "hasRole"
            },
            {
              "kind": "method",
              "name": "hasHand"
            },
            {
              "kind": "method",
              "name": "getRole"
            },
            {
              "kind": "method",
              "name": "renderBlackCard"
            },
            {
              "kind": "method",
              "name": "getHand"
            },
            {
              "kind": "method",
              "name": "getRounds"
            },
            {
              "kind": "method",
              "name": "handlePlayCard"
            },
            {
              "kind": "method",
              "name": "renderWhiteCards"
            },
            {
              "kind": "method",
              "name": "renderCards",
              "parameters": [
                {
                  "name": "cards",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderRounds"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "game-main",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GameMain",
          "declaration": {
            "name": "GameMain",
            "module": "src/game-main.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "game-main",
          "declaration": {
            "name": "GameMain",
            "module": "src/game-main.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/game.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Game",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "name"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "string"
              },
              "default": "'completed'"
            },
            {
              "kind": "field",
              "name": "whiteDeck",
              "type": {
                "text": "Array<Card>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "blackDeck",
              "type": {
                "text": "Array<Card>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "blackCard",
              "type": {
                "text": "Card | undefined"
              },
              "default": "new Card('0', '','')"
            },
            {
              "kind": "field",
              "name": "tableCards",
              "type": {
                "text": "Array<Card>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "players",
              "type": {
                "text": "Array<Player>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "rounds",
              "type": {
                "text": "Array<Round>"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "init",
              "parameters": [
                {
                  "name": "masterName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "shuffle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "deck",
                  "type": {
                    "text": "Array<Card>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "start"
            },
            {
              "kind": "method",
              "name": "drawBlackCard"
            },
            {
              "kind": "method",
              "name": "getPlayerWins",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getLastRoundWinner",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "getLeaderboard",
              "return": {
                "type": {
                  "text": "Array<{ playerName: string; wins: number }>"
                }
              }
            },
            {
              "kind": "method",
              "name": "stop"
            },
            {
              "kind": "method",
              "name": "join",
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "leave",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "drawHand",
              "parameters": [
                {
                  "name": "player",
                  "type": {
                    "text": "Player"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "drawCard",
              "privacy": "private",
              "parameters": [
                {
                  "name": "player",
                  "type": {
                    "text": "Player"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "playCard",
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "cardId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setMaster",
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPlayerTurnCompleted"
            },
            {
              "kind": "method",
              "name": "findMaster"
            },
            {
              "kind": "method",
              "name": "findMasterName"
            },
            {
              "kind": "method",
              "name": "findPlayers"
            },
            {
              "kind": "method",
              "name": "getPlayer",
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isMaster",
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPlayer",
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getRole",
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasMaster",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getHand",
              "parameters": [
                {
                  "name": "playerName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "areDecksEmpty"
            },
            {
              "kind": "method",
              "name": "toJSON"
            },
            {
              "kind": "method",
              "name": "fromJSON",
              "static": true,
              "parameters": [
                {
                  "name": "json",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Game",
          "declaration": {
            "name": "Game",
            "module": "src/game.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "routes",
          "type": {
            "text": "array"
          },
          "default": "[ { path: 'login', component: 'user-login', action: async () => { await import('./login'); }, }, { path: 'game', component: 'game-main', action: async () => { await import('./game-main'); }, }, { path: 'starting', component: 'starting-page', action: async () => { await import('./starting-page'); }, }, { path: 'winner', component: 'winner-page', action: async () => { await import('./winner-page'); }, }, { path: 'player-list', component: 'player-list', action: async () => { await import('./player-list'); }, }, { path: 'chat', component: 'game-chat', action: async () => { await import('./chat'); }, } ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "routes",
          "declaration": {
            "name": "routes",
            "module": "src/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/login.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Login",
          "members": [
            {
              "kind": "field",
              "name": "displayName",
              "attribute": "displayName"
            },
            {
              "kind": "field",
              "name": "user",
              "type": {
                "text": "User | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "method",
              "name": "signInAnonymously",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInputDisplayName",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "displayName",
              "fieldName": "displayName"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "user-login",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Login",
          "declaration": {
            "name": "Login",
            "module": "src/login.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "user-login",
          "declaration": {
            "name": "Login",
            "module": "src/login.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/player-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PlayerCard",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "lastOnline",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "lastOnline"
            },
            {
              "kind": "method",
              "name": "handleDelete"
            }
          ],
          "events": [
            {
              "name": "player-delete",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "lastOnline",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "lastOnline"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "player-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlayerCard",
          "declaration": {
            "name": "PlayerCard",
            "module": "src/player-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "player-card",
          "declaration": {
            "name": "PlayerCard",
            "module": "src/player-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/player-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PlayerList",
          "members": [
            {
              "kind": "field",
              "name": "users",
              "type": {
                "text": "Array<{ name: string, lastOnlineRef: Timestamp, lastOnlineFormatted: string }>"
              },
              "default": "[]",
              "attribute": "users"
            },
            {
              "kind": "method",
              "name": "loadUsers"
            },
            {
              "kind": "method",
              "name": "handlePlayerDelete",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "users",
              "type": {
                "text": "Array<{ name: string, lastOnlineRef: Timestamp, lastOnlineFormatted: string }>"
              },
              "default": "[]",
              "fieldName": "users"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "player-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlayerList",
          "declaration": {
            "name": "PlayerList",
            "module": "src/player-list.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "player-list",
          "declaration": {
            "name": "PlayerList",
            "module": "src/player-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/player.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Player",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "name"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "role"
            },
            {
              "kind": "field",
              "name": "hand",
              "type": {
                "text": "Array<Card>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "currentCardId",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "getCard",
              "parameters": [
                {
                  "name": "cardId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasCard",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "cardId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasCards",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCard"
            },
            {
              "kind": "method",
              "name": "hasCurrentCard"
            },
            {
              "kind": "method",
              "name": "removeCard",
              "parameters": [
                {
                  "name": "cardId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeCurrentCard"
            },
            {
              "kind": "method",
              "name": "toJSON"
            },
            {
              "kind": "method",
              "name": "fromJSON",
              "static": true,
              "parameters": [
                {
                  "name": "json",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Player",
          "declaration": {
            "name": "Player",
            "module": "src/player.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/round.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Round",
          "members": [
            {
              "kind": "field",
              "name": "winnerName",
              "type": {
                "text": "string"
              },
              "default": "winnerName"
            },
            {
              "kind": "field",
              "name": "sentence",
              "type": {
                "text": "string"
              },
              "default": "sentence"
            },
            {
              "kind": "method",
              "name": "toJSON"
            },
            {
              "kind": "method",
              "name": "fromJSON",
              "static": true,
              "parameters": [
                {
                  "name": "json",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Round",
          "declaration": {
            "name": "Round",
            "module": "src/round.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/starting-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StartingPage",
          "members": [
            {
              "kind": "field",
              "name": "currentGame",
              "default": "new Game('')"
            },
            {
              "kind": "method",
              "name": "handleNewGame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleJoin",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleStartGame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "loadGame"
            },
            {
              "kind": "method",
              "name": "findMasterName"
            },
            {
              "kind": "method",
              "name": "findPlayers"
            },
            {
              "kind": "method",
              "name": "isMaster"
            },
            {
              "kind": "method",
              "name": "isPlayer"
            },
            {
              "kind": "method",
              "name": "hasRole"
            },
            {
              "kind": "method",
              "name": "getRole"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "starting-page",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StartingPage",
          "declaration": {
            "name": "StartingPage",
            "module": "src/starting-page.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "starting-page",
          "declaration": {
            "name": "StartingPage",
            "module": "src/starting-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/store-service.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StoreService",
          "members": [
            {
              "kind": "method",
              "name": "saveGame",
              "static": true,
              "parameters": [
                {
                  "name": "game",
                  "type": {
                    "text": "Game"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onGameUpdate",
              "static": true,
              "parameters": [
                {
                  "name": "cb",
                  "type": {
                    "text": "CallbackFunction"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StoreService",
          "declaration": {
            "name": "StoreService",
            "module": "src/store-service.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/winner-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WinnerPage",
          "members": [
            {
              "kind": "field",
              "name": "currentGame",
              "default": "new Game('')"
            },
            {
              "kind": "method",
              "name": "handleNewGame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "loadGame"
            },
            {
              "kind": "method",
              "name": "renderLeaderboard"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "winner-page",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WinnerPage",
          "declaration": {
            "name": "WinnerPage",
            "module": "src/winner-page.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "winner-page",
          "declaration": {
            "name": "WinnerPage",
            "module": "src/winner-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/app.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "App",
          "default": "class App extends LitElement { constructor() { super(); this.header = 'My game'; } firstUpdated() { const outlet = this.shadowRoot?.getElementById('outlet'); if (outlet) { const router = new Router(outlet); router.setRoutes(routes); Router.go('/login'); } } render() { return html ` <main class=\"main\"> <!-- <div class=\"topnav\"> <a href=\"/\">Home</a> <a href=\"/login\">Login</a> <a href=\"/game\">Game</a> <a href=\"/player-list\">Player list</a> <a href=\"/chat\">Chat</a> <a href=\"/winner\">Winner</a> </div> --> <div id=\"outlet\" style=\"height: 100%\"></div> </main> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "App",
          "declaration": {
            "name": "App",
            "module": "out-tsc/src/app.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/card.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Card",
          "members": [
            {
              "kind": "method",
              "name": "getOppositeColor"
            },
            {
              "kind": "method",
              "name": "toJSON"
            },
            {
              "kind": "method",
              "name": "fromJSON",
              "static": true,
              "parameters": [
                {
                  "name": "json"
                }
              ]
            },
            {
              "kind": "field",
              "name": "id",
              "default": "id"
            },
            {
              "kind": "field",
              "name": "content",
              "default": "content"
            },
            {
              "kind": "field",
              "name": "color",
              "default": "color"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "out-tsc/src/card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/chat.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "Chat",
          "default": "class Chat extends LitElement { constructor() { super(); this.user = localStorage.userName ? localStorage.userName : ''; this.messages = []; this.messageText = ''; this.loadMessages(); } loadMessages() { const q = query(collection(db, \"messages\"), orderBy(\"timestamp\")); onSnapshot(q, (querySnapshot) => { this.messages = querySnapshot.docs.map(doc => { const data = doc.data(); const options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', }; const timestampFormatted = isToday(data.timestamp.toDate()) ? format(data.timestamp.toDate(), \"HH:mm\") // solo l'ora se oggi : format(data.timestamp.toDate(), \"dd MMMM yyyy, HH:mm\", { locale: it }); // data completa se non è oggi return { ...data, timestampFormatted: timestampFormatted }; }); this.requestUpdate(); }); } async sendMessage() { if (this.messageText.trim() === '') return; try { await addDoc(collection(db, \"messages\"), { user: this.user, text: this.messageText, timestamp: new Date() }); this.messageText = ''; // Clear the input after sending } catch (error) { console.error(\"Error adding message: \", error); } } handleInput(event) { const input = event.target; this.messageText = input.value; } render() { return html ` <div class=\"chat-container\"> <div class=\"messages\"> ${this.messages.map(message => html ` <div> ${message.timestampFormatted} <strong>${message.user}</strong>: ${message.text} </div> `)} </div> <div class=\"input-container\"> <input type=\"text\" .value=\"${this.messageText}\" @input=\"${this.handleInput}\" placeholder=\"Type a message...\" /> <button @click=\"${this.sendMessage}\">Send</button> </div> </div> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Chat",
          "declaration": {
            "name": "Chat",
            "module": "out-tsc/src/chat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/firebase.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "app"
        },
        {
          "kind": "variable",
          "name": "auth"
        },
        {
          "kind": "variable",
          "name": "db"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "app",
          "declaration": {
            "name": "app",
            "module": "out-tsc/src/firebase.js"
          }
        },
        {
          "kind": "js",
          "name": "auth",
          "declaration": {
            "name": "auth",
            "module": "out-tsc/src/firebase.js"
          }
        },
        {
          "kind": "js",
          "name": "db",
          "declaration": {
            "name": "db",
            "module": "out-tsc/src/firebase.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/game-card.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "GameCard",
          "default": "class GameCard extends LitElement { constructor() { super(...arguments); this.id = ''; this.description = ''; this.value = ''; this.color = ''; this.backgroundColor = ''; this.left = ''; this.zindex = ''; this.isselected = \"false\"; } handleClick() { this.dispatchEvent(new CustomEvent('game-card-click', { detail: { id: this.id }, bubbles: true, composed: true })); } getDescription() { const a = this.description.split('______ '); if (this.value !== '') { return html ` <span>${a[0]}</span> <span style=\"font-weight: 400; font-family: sans-serif; font-size: 30px; text-decoration: underline\">${this.value}</span> <span style=\"margin-left: -6px\">${a[1]}</span> `; } return this.description; } render() { return html ` <div class=\"card ${this.backgroundColor}\" @click=${this.handleClick} style=\"left: ${this.left}; z-index: ${this.isselected === \"true\" ? 1000 : this.zindex};\"> <p>${this.getDescription()}<span class=\"point\">.</span></p> </div> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GameCard",
          "declaration": {
            "name": "GameCard",
            "module": "out-tsc/src/game-card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/game-main.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "GameMain",
          "default": "class GameMain extends LitElement { constructor() { super(); this.currentCardId = ''; this.currentGame = new Game(''); this.loadGame(); } handleCardClick(event) { this.currentCardId = event.detail.id; this.requestUpdate(); } findCardContent(cardId) { var cards = this.getRole() === 'player' ? this.getHand() : this.currentGame.tableCards; const card = cards.find((c) => c.id === cardId); if (card) { return card.content; } return ''; } handleStopGame(event) { console.log('handleStopGame'); this.currentGame.stop(); StoreService.saveGame(this.currentGame); this.requestUpdate(); } handleLeaveGame() { this.currentGame.leave(localStorage.userName); StoreService.saveGame(this.currentGame); Router.go('/'); } loadGame() { StoreService.onGameUpdate((game) => { this.currentGame = game; if (this.currentGame.status !== 'started' || !this.hasRole()) { Router.go('/starting'); } if (this.currentGame.status === 'completed') { Router.go('/winner'); } if (this.getPlayer()?.hasCards() && !this.getPlayer()?.hasCard(this.currentCardId)) { this.currentCardId = ''; } this.requestUpdate(); }); } findMasterName() { return this.currentGame.findMasterName(); } findPlayers() { return this.currentGame.findPlayers(); } isMaster() { return this.currentGame.isMaster(localStorage.userName); } isPlayer() { return this.currentGame.isPlayer(localStorage.userName); } getPlayer() { return this.currentGame.getPlayer(localStorage.userName); } hasRole() { return this.getPlayer(); } hasHand() { const player = this.currentGame.getPlayer(localStorage.userName); return player ? player.hand.length > 0 : false; } getRole() { return this.currentGame.getRole(localStorage.userName); } renderBlackCard() { if (!this.hasRole()) { return html ``; } let left = 0; let zindex = 11; return html `<game-card description=\"${this.currentGame.blackCard?.content}\" value=\"${this.findCardContent(this.currentCardId)}\" backgroundColor=\"${this.currentGame.blackCard?.color}\" color=\"${this.currentGame.blackCard?.getOppositeColor()}\"></game-card>`; } getHand() { return this.currentGame.getHand(localStorage.userName); } getRounds() { return this.currentGame.rounds; } handlePlayCard() { this.currentGame.playCard(localStorage.userName, this.currentCardId); StoreService.saveGame(this.currentGame); } renderWhiteCards() { if (this.getRole() === 'player') { return this.renderCards(this.getHand()); } else { return this.renderCards(this.currentGame.tableCards); } } renderCards(cards) { let left = -60; let zindex = 11; return html `<div class=\"container-cards\"> ${cards.map((card) => new Card(card.id, card.content, card.color)).map((card) => { left += 40; zindex -= 1; return html ` <game-card id=\"${card.id}\" description=\"${card.content}\" backgroundColor=\"${card.color}\" color=\"${card.getOppositeColor()}\" left=\"${left}px\" zindex=\"${zindex}\" isselected=\"${card.id === this.currentCardId}\"></game-card> `; })} </div>`; } renderRounds() { return html `<div> ${this.getRounds().map((round) => { return html `<div> winner:${round.winnerName} ${round.sentence} </div>`; })} </div>`; } render() { return html ` <main class=\"game\" @game-card-click=${this.handleCardClick}> <span>User: ${localStorage.userName}(${this.getRole()}) - ${this.currentGame.status}</span> <div class=\"container-widget\"> ${this.currentGame.players.map(player => html ` <span class=\"${player.role}-widget\" style=\"${player.name === localStorage.userName ? 'font-weight: bold;' : ''}\"> ${player.name} ${player.currentCardId !== '' ? html `has choosen` : html ``} ${this.currentGame.getPlayerWins(player.name)} </span> `)} </div> ${this.renderBlackCard()} ${this.getPlayer()?.currentCardId === '' ? this.renderWhiteCards() : html `<div style=\"color:white\">wait...</div>`} <div class=\"container-widget\"> ${this.getPlayer()?.currentCardId === '' && this.currentCardId !== '' ? html `<button class=\"action-button\" @click=\"${this.handlePlayCard}\">Confirm</button>` : html ``} ${this.currentGame.status === 'started' ? html `<button class=\"action-button\" @click=\"${this.handleStopGame}\">Stop</button>` : html ``} <button class=\"action-button\" @click=\"${this.handleLeaveGame}\">Leave</button> </div> ${this.renderRounds()} </main> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GameMain",
          "declaration": {
            "name": "GameMain",
            "module": "out-tsc/src/game-main.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/game.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Game",
          "members": [
            {
              "kind": "method",
              "name": "init",
              "parameters": [
                {
                  "name": "masterName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "shuffle",
              "parameters": [
                {
                  "name": "deck"
                }
              ]
            },
            {
              "kind": "method",
              "name": "start"
            },
            {
              "kind": "method",
              "name": "drawBlackCard"
            },
            {
              "kind": "method",
              "name": "getPlayerWins",
              "parameters": [
                {
                  "name": "playerName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getLastRoundWinner"
            },
            {
              "kind": "method",
              "name": "getLeaderboard"
            },
            {
              "kind": "method",
              "name": "stop"
            },
            {
              "kind": "method",
              "name": "join",
              "parameters": [
                {
                  "name": "playerName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "leave",
              "parameters": [
                {
                  "name": "playerName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "drawHand",
              "parameters": [
                {
                  "name": "player"
                }
              ]
            },
            {
              "kind": "method",
              "name": "drawCard",
              "parameters": [
                {
                  "name": "player"
                }
              ]
            },
            {
              "kind": "method",
              "name": "playCard",
              "parameters": [
                {
                  "name": "playerName"
                },
                {
                  "name": "cardId"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setMaster",
              "parameters": [
                {
                  "name": "playerName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPlayerTurnCompleted"
            },
            {
              "kind": "method",
              "name": "findMaster"
            },
            {
              "kind": "method",
              "name": "findMasterName"
            },
            {
              "kind": "method",
              "name": "findPlayers"
            },
            {
              "kind": "method",
              "name": "getPlayer",
              "parameters": [
                {
                  "name": "playerName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isMaster",
              "parameters": [
                {
                  "name": "playerName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPlayer",
              "parameters": [
                {
                  "name": "playerName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getRole",
              "parameters": [
                {
                  "name": "playerName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasMaster"
            },
            {
              "kind": "method",
              "name": "getHand",
              "parameters": [
                {
                  "name": "playerName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "areDecksEmpty"
            },
            {
              "kind": "method",
              "name": "toJSON"
            },
            {
              "kind": "method",
              "name": "fromJSON",
              "static": true,
              "parameters": [
                {
                  "name": "json"
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "default": "name"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "string"
              },
              "default": "'completed'"
            },
            {
              "kind": "field",
              "name": "whiteDeck",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "blackDeck",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "players",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "blackCard",
              "default": "new Card('0', '', '')"
            },
            {
              "kind": "field",
              "name": "tableCards",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "rounds",
              "type": {
                "text": "array"
              },
              "default": "[]"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Game",
          "declaration": {
            "name": "Game",
            "module": "out-tsc/src/game.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/index.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "routes",
          "type": {
            "text": "array"
          },
          "default": "[ { path: 'login', component: 'user-login', action: async () => { await import('./login'); }, }, { path: 'game', component: 'game-main', action: async () => { await import('./game-main'); }, }, { path: 'starting', component: 'starting-page', action: async () => { await import('./starting-page'); }, }, { path: 'winner', component: 'winner-page', action: async () => { await import('./winner-page'); }, }, { path: 'player-list', component: 'player-list', action: async () => { await import('./player-list'); }, }, { path: 'chat', component: 'game-chat', action: async () => { await import('./chat'); }, } ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "routes",
          "declaration": {
            "name": "routes",
            "module": "out-tsc/src/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/login.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "Login",
          "default": "class Login extends LitElement { constructor() { super(); this.displayName = localStorage.userName ? localStorage.userName : ''; this.user = null; if (this.displayName) { this.signInAnonymously(); } } async signInAnonymously() { try { const userCredential = await signInAnonymously(auth); this.user = userCredential.user; console.log(\"Signed in anonymously:\", this.user.uid); if (this.user) { await updateProfile(this.user, { displayName: this.displayName }); const userDoc = doc(db, \"users\", this.displayName); const data = { name: this.displayName, sessionId: this.user.uid, lastOnlineRef: new Date(), }; await setDoc(userDoc, data); localStorage.userName = data.name; localStorage.sessionId = data.sessionId; Router.go('/starting'); } else { console.warn(\"No user is currently signed in.\"); } this.requestUpdate(); } catch (error) { console.error(\"Anonymous auth failed:\", error); // Handle errors more gracefully! } } handleInputDisplayName(event) { const input = event.target; this.displayName = input.value; } render() { return html ` <div class=\"login\"> <p class=\"input-label\">E tu chi saresti???</p> <div class=\"input-container\"> <div class=\"input-container2\"> <input type=\"text\" .value=\"${this.displayName}\" @input=\"${this.handleInputDisplayName}\" maxlength=\"6\" placeholder=\"Io sono...\"/> </div> <div class=\"input-container3\"> <button @click=\"${this.signInAnonymously}\">Login</button> </div> </div> </div> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Login",
          "declaration": {
            "name": "Login",
            "module": "out-tsc/src/login.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/player-card.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PlayerCard",
          "default": "class PlayerCard extends LitElement { constructor() { super(...arguments); this.name = ''; this.lastOnline = ''; } handleDelete() { this.dispatchEvent(new CustomEvent('player-delete', { detail: { name: this.name }, bubbles: true, composed: true })); } render() { return html ` <p class=\"player\"> <span>${this.name}</span> <span>${this.lastOnline}</span> <button @click=\"${this.handleDelete}\">Delete</button> </p> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlayerCard",
          "declaration": {
            "name": "PlayerCard",
            "module": "out-tsc/src/player-card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/player-list.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PlayerList",
          "default": "class PlayerList extends LitElement { constructor() { super(); this.users = []; this.loadUsers(); } async loadUsers() { const q = query(collection(db, \"users\"), orderBy(\"lastOnlineRef\")); onSnapshot(q, (querySnapshot) => { this.users = querySnapshot.docs.map(doc => { const data = doc.data(); const lastOnlineFormatted = formatDistanceToNow(data.lastOnlineRef.toDate(), { addSuffix: true, locale: it }); return { ...data, lastOnlineFormatted: lastOnlineFormatted }; }); this.requestUpdate(); }); } handlePlayerDelete(event) { const playerDoc = doc(db, \"users\", event.detail.name); deleteDoc(playerDoc); } render() { return html ` <div class=\"users\"> Players: ${this.users.map(user => html ` <player-card name=\"${user.name}\" lastOnline= \"${user.lastOnlineFormatted}\" @player-delete=\"${this.handlePlayerDelete}\"/> `)} </div> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlayerList",
          "declaration": {
            "name": "PlayerList",
            "module": "out-tsc/src/player-list.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/player.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Player",
          "members": [
            {
              "kind": "method",
              "name": "getCard",
              "parameters": [
                {
                  "name": "cardId"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasCard",
              "parameters": [
                {
                  "name": "cardId"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasCards"
            },
            {
              "kind": "method",
              "name": "getCurrentCard"
            },
            {
              "kind": "method",
              "name": "hasCurrentCard"
            },
            {
              "kind": "method",
              "name": "removeCard",
              "parameters": [
                {
                  "name": "cardId"
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeCurrentCard"
            },
            {
              "kind": "method",
              "name": "toJSON"
            },
            {
              "kind": "method",
              "name": "fromJSON",
              "static": true,
              "parameters": [
                {
                  "name": "json"
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "default": "name"
            },
            {
              "kind": "field",
              "name": "role",
              "default": "role"
            },
            {
              "kind": "field",
              "name": "hand",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "currentCardId",
              "type": {
                "text": "string"
              },
              "default": "''"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Player",
          "declaration": {
            "name": "Player",
            "module": "out-tsc/src/player.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/round.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Round",
          "members": [
            {
              "kind": "method",
              "name": "toJSON"
            },
            {
              "kind": "method",
              "name": "fromJSON",
              "static": true,
              "parameters": [
                {
                  "name": "json"
                }
              ]
            },
            {
              "kind": "field",
              "name": "winnerName",
              "default": "winnerName"
            },
            {
              "kind": "field",
              "name": "sentence",
              "default": "sentence"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Round",
          "declaration": {
            "name": "Round",
            "module": "out-tsc/src/round.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/starting-page.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "StartingPage",
          "default": "class StartingPage extends LitElement { constructor() { super(); this.currentGame = new Game(''); this.loadGame(); } handleNewGame(event) { const gameName = new Date().toString(); const game = new Game(gameName); game.init(localStorage.userName); StoreService.saveGame(game); } handleJoin(event) { this.currentGame.join(localStorage.userName); StoreService.saveGame(this.currentGame); } handleStartGame(event) { this.currentGame.start(); StoreService.saveGame(this.currentGame); } loadGame() { StoreService.onGameUpdate((game) => { this.currentGame = game; if (this.currentGame.status === 'started' && this.hasRole()) { Router.go('/game'); } this.requestUpdate(); }); } findMasterName() { return this.currentGame.findMasterName(); } findPlayers() { return this.currentGame.findPlayers(); } isMaster() { return this.currentGame.isMaster(localStorage.userName); } isPlayer() { return this.currentGame.isPlayer(localStorage.userName); } hasRole() { return this.currentGame.getPlayer(localStorage.userName); } getRole() { return this.currentGame.getRole(localStorage.userName); } render() { return html ` <main class=\"game\"> <span>User: ${localStorage.userName}(${this.getRole()}) - ${this.currentGame.status}</span> <div class=\"information-container\"> <p class=\"information\">${this.findMasterName() !== '' ? this.findMasterName() + ' has started the game' : ''}</p> ${this.findPlayers().map(player => html ` <p class=\"information\"> ${player.name} has joined the game </p> `)} </div> <div class=\"container-button\"> ${this.currentGame.status === 'completed' ? html `<button class=\"action-button\" @click=\"${this.handleNewGame}\">New game</button>` : html ``} ${this.isMaster() && this.currentGame.status === 'pending' ? html `<button class=\"action-button\" @click=\"${this.handleStartGame}\">Start game</button>` : html ``} ${!this.hasRole() && this.currentGame.status === 'pending' ? html `<button class=\"action-button\" @click=\"${this.handleJoin}\">Join</button>` : html ``} </div> </main> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StartingPage",
          "declaration": {
            "name": "StartingPage",
            "module": "out-tsc/src/starting-page.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/store-service.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StoreService",
          "members": [
            {
              "kind": "method",
              "name": "saveGame",
              "static": true,
              "parameters": [
                {
                  "name": "game"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onGameUpdate",
              "static": true,
              "parameters": [
                {
                  "name": "cb"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StoreService",
          "declaration": {
            "name": "StoreService",
            "module": "out-tsc/src/store-service.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "out-tsc/src/winner-page.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "WinnerPage",
          "default": "class WinnerPage extends LitElement { constructor() { super(); this.currentGame = new Game(''); this.loadGame(); } handleNewGame(event) { const gameName = new Date().toString(); const game = new Game(gameName); game.init(localStorage.userName); StoreService.saveGame(game); } loadGame() { StoreService.onGameUpdate((game) => { this.currentGame = game; if (this.currentGame.status === 'pending') { Router.go('/starting'); } this.requestUpdate(); }); } renderLeaderboard() { const leaderboard = this.currentGame.getLeaderboard(); return html ` <div class=\"leaderboard\"> <h3>Classifica</h3> <ul> ${leaderboard.map(entry => html ` <li>${entry.playerName}: ${entry.wins} vittorie</li> `)} </ul> </div> `; } render() { return html ` <main class=\"game\"> <span>User: ${localStorage.userName}${this.currentGame.status}</span> <button @click=\"${this.handleNewGame}\">New game</button> ${this.renderLeaderboard()} </main> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WinnerPage",
          "declaration": {
            "name": "WinnerPage",
            "module": "out-tsc/src/winner-page.js"
          }
        }
      ]
    }
  ]
}
