{"version":3,"file":"chat.js","sourceRoot":"","sources":["../../src/chat.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\n\nimport { db } from './firebase.js';\nimport { collection, addDoc, query, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\n\nimport { format, isToday } from \"date-fns\";\nimport { it } from \"date-fns/locale\";\n\n@customElement('game-chat')\nexport class Chat extends LitElement {\n  \n  @property({ type: String }) user = localStorage.userName ? localStorage.userName : ''; \n  @property({ type: Array }) messages: Array<{ user: string, text: string, timestamp: Timestamp, timestampFormatted: string }> = [];\n  @property({ type: String }) messageText: string = '';\n\n  static styles = css`\n    .chat-container {\n      width: 600px;\n      height: 400px;\n      border: 1px solid #ccc;\n      display: flex;\n      flex-direction: column;\n      padding: 10px;\n      overflow-y: scroll;\n    }\n\n    .messages {\n      flex-grow: 1;\n      overflow-y: auto;\n    }\n\n    .input-container {\n      display: flex;\n      margin-top: 10px;\n    }\n\n    .input-container input {\n      flex-grow: 1;\n      padding: 5px;\n    }\n\n    .input-container button {\n      padding: 5px 10px;\n    }\n  `;\n\n  constructor() {\n    super();\n    this.loadMessages();\n  }\n\n  \n  loadMessages() {\n    const q = query(collection(db, \"messages\"), orderBy(\"timestamp\"));\n    onSnapshot(q, (querySnapshot) => {\n      this.messages = querySnapshot.docs.map(doc => {\n        const data = doc.data() as { \n          user: string, \n          text: string, \n          timestamp: Timestamp \n        };\n\n        const options: Intl.DateTimeFormatOptions = {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          hour: 'numeric',\n          minute: 'numeric',\n        };\n\n        const timestampFormatted = isToday(data.timestamp.toDate())\n        ? format(data.timestamp.toDate(), \"HH:mm\") // solo l'ora se oggi\n        : format(data.timestamp.toDate(), \"dd MMMM yyyy, HH:mm\", { locale: it }); // data completa se non Ã¨ oggi\n\n   \n        return {\n          ...data,\n          timestampFormatted: timestampFormatted\n        };\n      });\n\n      this.requestUpdate();\n    });\n  }\n\n  async sendMessage() {\n    if (this.messageText.trim() === '') return;\n\n    try {\n      await addDoc(collection(db, \"messages\"), {\n        user: this.user,\n        text: this.messageText,\n        timestamp: new Date()\n      });\n      this.messageText = ''; // Clear the input after sending\n    } catch (error) {\n      console.error(\"Error adding message: \", error);\n    }\n  }\n\n  handleInput(event: Event) {\n    const input = event.target as HTMLInputElement;\n    this.messageText = input.value;\n  }\n  render() {\n    return html`\n      <div class=\"chat-container\">\n        <div class=\"messages\">\n          ${this.messages.map(message => html`\n            <div>\n              ${message.timestampFormatted} <strong>${message.user}</strong>: ${message.text}\n            </div>\n          `)}\n        </div>\n        <div class=\"input-container\">\n          <input type=\"text\" .value=\"${this.messageText}\" @input=\"${this.handleInput}\" placeholder=\"Type a message...\" />\n          <button @click=\"${this.sendMessage}\">Send</button>\n        </div>\n      </div>\n    `;\n  }\n\n}\n"]}