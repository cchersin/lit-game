{"version":3,"file":"game.js","sourceRoot":"","sources":["../../src/game.ts"],"names":[],"mappings":"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","sourcesContent":["import { th } from 'date-fns/locale';\nimport { Card } from './card.js'\nimport { Player } from './player.js'\nimport { Round } from './round.js'\n\nconst whiteCards = [\n    new Card('1', 'Martina', 'white'), \n    new Card('2', 'Inès', 'white'),\n    new Card('3', 'Andrea', 'white'),\n    new Card('4', 'Montra', 'white'), \n    new Card('5', 'le critiche di Rossolini', 'white'),\n    new Card('6', 'Grado', 'white'),\n    new Card('7', 'la sessualità di Martina', 'white'), \n    new Card('8', 'il divorzio dei miei genitori', 'white'),\n    new Card('9', 'il comic sans', 'white'),\n    new Card('10', 'l\\'Helvetica', 'white'), \n    new Card('11', 'i poveri che non hanno soldi', 'white'),\n    new Card('12', 'i ladri che rubano', 'white'),    \n  ];\n\nconst blackCards = [\n    new Card('1', 'A colazione oggi Montra ha mangiato ______ .', 'black'),\n    new Card('2', 'Per far andare Cindy più veloce abbiamo deciso di potenziare il suo carretto con ______ .', 'black'),\n    new Card('3', 'Bevo per dimenticare ______ .', 'black') \n  ];\n\nexport class Game {\n  name: string;\n  status: string; \n  whiteDeck: Array<Card>;\n  blackDeck: Array<Card>;\n  blackCard?: Card;\n  tableCards: Array<Card>;\n  players: Array<Player>; \n  rounds: Array<Round>;\n  \n  constructor(name: string) {\n    this.name = name;\n    this.status = 'completed';\n    this.whiteDeck = [];\n    this.blackDeck = [];\n    this.players = [];\n    this.blackCard = new Card('0', '','');\n    this.tableCards = [];\n    this.rounds = [];\n  }\n\n  init(masterName: string) {\n    console.log('init game');\n \n    const p = new Player(masterName, 'master');\n    this.players = [p];\n    this.whiteDeck = whiteCards;\n    this.shuffle(this.whiteDeck);\n    this.shuffle(this.blackDeck);\n    this.blackDeck = blackCards;\n    this.status = 'pending';\n  }\n\n  shuffle(deck: Array<Card>): void {\n    for (let i = deck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n  }\n\n  start() {\n    console.log('start game');\n \n    this.status = 'started';\n    this.drawBlackCard();\n  }\n\n  drawBlackCard() {\n    const drawnCard = this.blackDeck.shift();\n    if (drawnCard) {\n       this.blackCard = drawnCard;\n    }\n  }\n\n  getPlayerWins(playerName: string): number {\n      return this.rounds.filter(round => round.winnerName === playerName).length;\n  }\n\n  getLastRoundWinner(): string {\n    if (this.rounds.length === 0) {\n      return '';\n    }\n  \n    const lastRound = this.rounds[this.rounds.length - 1];\n    return lastRound.winnerName || '';\n  }\n\n  getLeaderboard(): Array<{ playerName: string; wins: number }> {\n     return this.players\n      .map(player => ({\n        playerName: player.name,\n        wins: this.getPlayerWins(player.name)\n    }))\n    .sort((a, b) => b.wins - a.wins); \n  }\n \n  stop() {\n    console.log('stop game');\n \n    this.status = 'completed';\n    // this.players = [];\n  }\n\n  join(playerName: string) {\n    let p = this.players.find((player) => player.name === playerName);\n\n    if (!p) {\n      p = new Player(playerName, 'player');\n      this.players.push(p);\n\n      this.drawHand(p);\n    }\n  }\n\n  leave(playerName: string): void {\n    const playerIndex = this.players.findIndex(player => player.name === playerName);\n    if (playerIndex !== -1) {\n      this.players.splice(playerIndex, 1);\n    }\n\n    if (!this.hasMaster()) {\n      this.stop();\n    }\n  }\n\n  drawHand(player: Player) {\n    player.currentCardId = '';\n    for(let i = player.hand.length; i < 3; i++) {\n      this.drawCard(player);\n    }\n  }\n\n  \n  private drawCard(player: Player) {\n    const drawnCard = this.whiteDeck.shift();\n    if (drawnCard) {\n      player.hand.push(drawnCard);\n    }\n  }\n\n  playCard(playerName: string, cardId: string) {\n   \n    let p = this.players.find((player) => player.name === playerName);\n\n    if (p) {\n      if (p.role == 'player') {\n        p.currentCardId = cardId;\n        if (this.isPlayerTurnCompleted()) {\n            const master = this.findMaster();\n\n            if (master) {\n              this.findPlayers().forEach((player) => {\n                  const card = player.getCurrentCard();\n                  if (card) {\n                    player.removeCurrentCard();\n                    this.tableCards.push(card);\n                  }\n              });\n            }\n        }\n      } else {\n        const areDecksEmpty = this.areDecksEmpty();\n        \n        const winner = this.findPlayers().find((player) => player.currentCardId === cardId);\n        const winnerCard = p.getCard(cardId);\n        const winnerCardContent = winnerCard ? winnerCard.content : '';\n        const blackCardContent = this.blackCard ? this.blackCard.content : '';\n        const sentence = blackCardContent.replace('______ ',winnerCardContent);\n        const winnerName = winner ? winner.name : '';\n\n        const round = new Round(winnerName, sentence);\n        this.rounds.push(round);\n\n        if (areDecksEmpty) {\n          this.stop();\n        } else \n          this.setMaster(winnerName);\n       }\n    }\n  }\n\n  setMaster(playerName: string) {\n    const p = this.players.find((player) => player.name === playerName);\n    if (p) {\n      p.role = 'master';\n      p.currentCardId = '';\n      this.tableCards = [];\n      this.drawBlackCard(); \n      this.players.filter((player) => player.name !== playerName).forEach((player) => {\n        player.role = 'player';\n        player.currentCardId = '';\n        this.drawHand(player);  \n      });\n    }\n  }\n\n  isPlayerTurnCompleted() {\n    return !this.findPlayers().find((player) => !player.hasCurrentCard());\n  }\n\n  findMaster() {\n    return this.players.find(p => p.role === 'master');\n  }\n\n  findMasterName() {\n    const master = this.findMaster();\n    return master ? master.name : '';\n  }\n\n  findPlayers() {\n    return this.players.filter(p => p.role === 'player');\n  } \n\n  getPlayer(playerName: string) {\n    return this.players.find((player) => player.name === playerName);\n  }\n\n  isMaster(playerName: string) {\n    return this.getPlayer(playerName)?.role === 'master';\n  }\n\n  isPlayer(playerName: string) {\n    return this.getPlayer(playerName)?.role === 'player';\n  }\n\n  getRole(playerName: string) {\n    const p = this.getPlayer(playerName);\n    if (p) {\n      return p.role;\n    }\n    return '';\n  }\n\n  hasMaster(): boolean {\n     return this.players.some(player => player.role === 'master');\n  }\n\n  getHand(playerName: string) {\n    const p = this.getPlayer(playerName);\n    if (p) {\n      return p.hand;\n    }\n   \n    return [];\n  }\n\n  areDecksEmpty() {\n    return this.whiteDeck.length === 0 || this.blackDeck.length === 0;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      status: this.status,\n      whiteDeck: this.whiteDeck.map(c => c.toJSON()),\n      blackDeck: this.blackDeck.map(c => c.toJSON()),\n      blackCard: this.blackCard?.toJSON(),\n      tableCards: this.tableCards.map(c => c.toJSON()),\n      players: this.players.map(c => c.toJSON()),\n      rounds: this.rounds.map(r => r.toJSON())\n    };\n  }\n\n  static fromJSON(json: any) {\n    const g = new Game(json.name);\n    g.status = json.status;\n    g.whiteDeck = json.whiteDeck.map((c: any) => Card.fromJSON(c));\n    g.blackDeck = json.blackDeck.map((c: any) => Card.fromJSON(c));\n    g.blackCard = Card.fromJSON(json.blackCard);\n    g.tableCards = json.tableCards.map((c: any) => Card.fromJSON(c));\n    g.players = json.players.map((p: any) => Player.fromJSON(p));\n    g.rounds = json.rounds.map((r:any) => Round.fromJSON(r));\n    return g;\n  }\n}\n                                      "]}