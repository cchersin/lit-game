{"version":3,"file":"player.js","sourceRoot":"","sources":["../../src/player.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAA;AAEhC,MAAM,OAAO,MAAM;IAMjB,YAAY,IAAY,EAAE,IAAY;QACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC1B,CAAC;IAED,OAAO,CAAC,MAAc;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;IACtD,CAAC;IAED,OAAO,CAAC,MAAc;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;IACvD,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1C,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,aAAa,KAAK,EAAE,CAAC;IACnC,CAAC;IAED,UAAU,CAAC,MAAc;QACvB,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;QACpE,IAAI,SAAS,KAAK,CAAC,CAAC,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED,iBAAiB;QACf,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACnC,IAAI,IAAI,EAAE,CAAC;YACT,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;YACpC,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAS;QACvB,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACrC,OAAO,CAAC,CAAC;IACX,CAAC;CACF","sourcesContent":["import { Card } from './card.js'\n\nexport class Player {\n  name: string;\n  role: string;\n  hand: Array<Card>;\n  currentCardId: string;\n\n  constructor(name: string, role: string) {\n    this.name = name;\n    this.role = role;\n    this.hand = [];\n    this.currentCardId = '';\n  }\n\n  getCard(cardId: string) {\n    return this.hand.find((card) => card.id === cardId);\n  }\n\n  hasCard(cardId: string): boolean {\n     return this.hand.some((card) => card.id === cardId);\n  }\n\n  hasCards(): boolean {\n    return this.hand.length > 0;\n  }\n\n  getCurrentCard() {\n    return this.getCard(this.currentCardId);\n  }\n\n  hasCurrentCard() {\n    return this.currentCardId !== '';\n  }\n\n  removeCard(cardId: string) {\n    const cardIndex = this.hand.findIndex((card) => card.id === cardId);\n    if (cardIndex !== -1) {\n      this.hand.splice(cardIndex, 1);\n    }\n  }\n\n  removeCurrentCard() {\n    const card = this.getCurrentCard();\n    if (card) {\n      this.removeCard(card.id);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      role: this.role,\n      hand: this.hand.map(c => c.toJSON()),\n      currentCardId: this.currentCardId,\n    };\n  }\n\n  static fromJSON(json: any) {\n    const p = new Player(json.name, json.role);\n    p.hand = json.hand.map((c: any) => Card.fromJSON(c));\n    p.currentCardId = json.currentCardId;\n    return p;\n  }\n}\n                                      "]}