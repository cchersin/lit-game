"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunklit_game"] = self["webpackChunklit_game"] || []).push([["src_store-service_ts"],{

/***/ "./src/card.ts":
/*!*********************!*\
  !*** ./src/card.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Card: () => (/* binding */ Card)\n/* harmony export */ });\nclass Card {\n    constructor(id, content, color) {\n        this.id = id;\n        this.content = content;\n        this.color = color;\n    }\n    getOppositeColor() {\n        if (this.color === 'white')\n            return 'black';\n        return 'white';\n    }\n    toJSON() {\n        return {\n            id: this.id,\n            content: this.content,\n            color: this.color,\n        };\n    }\n    static fromJSON(json) {\n        return new Card(json.id, json.content, json.color);\n    }\n}\n\n\n//# sourceURL=webpack://lit-game/./src/card.ts?");

/***/ }),

/***/ "./src/firebase.ts":
/*!*************************!*\
  !*** ./src/firebase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   app: () => (/* binding */ app),\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   db: () => (/* binding */ db)\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB8KIR75UzA3U9lgRKDLTn7CJnKbYm97Fo\",\n    authDomain: \"myreactgame-8a3b9.firebaseapp.com\",\n    projectId: \"myreactgame-8a3b9\",\n    storageBucket: \"myreactgame-8a3b9.firebasestorage.app\",\n    messagingSenderId: \"989554260876\",\n    appId: \"1:989554260876:web:48d48133992058331c74a9\",\n    measurementId: \"G-7PVPBHY7JT\"\n};\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\n\n\n//# sourceURL=webpack://lit-game/./src/firebase.ts?");

/***/ }),

/***/ "./src/game.ts":
/*!*********************!*\
  !*** ./src/game.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Game: () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./card */ \"./src/card.ts\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./player */ \"./src/player.ts\");\n/* harmony import */ var _round__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./round */ \"./src/round.ts\");\n\n\n\nconst whiteCards = [\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('1', 'Martina', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('2', 'Inès', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('3', 'Andrea', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('4', 'Montra', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('5', 'le critiche di Rossolini', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('6', 'Grado', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('7', 'la sessualità di Martina', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('8', 'il divorzio dei miei genitori', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('9', 'il comic sans', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('10', 'l\\'Helvetica', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('11', 'i poveri che non hanno soldi', 'white'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('12', 'i ladri che rubano', 'white'),\n];\nconst blackCards = [\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('1', 'A colazione oggi Montra ha mangiato ______ .', 'black'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('2', 'Per far andare Cindy più veloce abbiamo deciso di potenziare il suo carretto con ______ .', 'black'),\n    new _card__WEBPACK_IMPORTED_MODULE_0__.Card('3', 'Bevo per dimenticare ______ .', 'black')\n];\nclass Game {\n    constructor(name) {\n        this.name = name;\n        this.status = 'completed';\n        this.whiteDeck = [];\n        this.blackDeck = [];\n        this.players = [];\n        this.blackCard = new _card__WEBPACK_IMPORTED_MODULE_0__.Card('0', '', '');\n        this.tableCards = [];\n        this.rounds = [];\n    }\n    init(masterName) {\n        console.log('init game');\n        const p = new _player__WEBPACK_IMPORTED_MODULE_1__.Player(masterName, 'master');\n        this.players = [p];\n        this.whiteDeck = whiteCards;\n        this.shuffle(this.whiteDeck);\n        this.shuffle(this.blackDeck);\n        this.blackDeck = blackCards;\n        this.status = 'pending';\n    }\n    shuffle(deck) {\n        for (let i = deck.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [deck[i], deck[j]] = [deck[j], deck[i]];\n        }\n    }\n    start() {\n        console.log('start game');\n        this.status = 'started';\n        this.drawBlackCard();\n    }\n    drawBlackCard() {\n        const drawnCard = this.blackDeck.shift();\n        if (drawnCard) {\n            this.blackCard = drawnCard;\n        }\n    }\n    getPlayerWins(playerName) {\n        return this.rounds.filter(round => round.winnerName === playerName).length;\n    }\n    getLastRoundWinner() {\n        if (this.rounds.length === 0) {\n            return '';\n        }\n        const lastRound = this.rounds[this.rounds.length - 1];\n        return lastRound.winnerName || '';\n    }\n    getLeaderboard() {\n        return this.players\n            .map(player => ({\n            playerName: player.name,\n            wins: this.getPlayerWins(player.name)\n        }))\n            .sort((a, b) => b.wins - a.wins);\n    }\n    stop() {\n        console.log('stop game');\n        this.status = 'completed';\n        // this.players = [];\n    }\n    join(playerName) {\n        let p = this.players.find((player) => player.name === playerName);\n        if (!p) {\n            p = new _player__WEBPACK_IMPORTED_MODULE_1__.Player(playerName, 'player');\n            this.players.push(p);\n            this.drawHand(p);\n        }\n    }\n    leave(playerName) {\n        const playerIndex = this.players.findIndex(player => player.name === playerName);\n        if (playerIndex !== -1) {\n            this.players.splice(playerIndex, 1);\n        }\n        if (!this.hasMaster()) {\n            this.stop();\n        }\n    }\n    drawHand(player) {\n        player.currentCardId = '';\n        for (let i = player.hand.length; i < 3; i++) {\n            this.drawCard(player);\n        }\n    }\n    drawCard(player) {\n        const drawnCard = this.whiteDeck.shift();\n        if (drawnCard) {\n            player.hand.push(drawnCard);\n        }\n    }\n    playCard(playerName, cardId) {\n        let p = this.players.find((player) => player.name === playerName);\n        if (p) {\n            if (p.role == 'player') {\n                p.currentCardId = cardId;\n                if (this.isPlayerTurnCompleted()) {\n                    const master = this.findMaster();\n                    if (master) {\n                        this.findPlayers().forEach((player) => {\n                            const card = player.getCurrentCard();\n                            if (card) {\n                                player.removeCurrentCard();\n                                this.tableCards.push(card);\n                            }\n                        });\n                    }\n                }\n            }\n            else {\n                const areDecksEmpty = this.areDecksEmpty();\n                const winner = this.findPlayers().find((player) => player.currentCardId === cardId);\n                const winnerCard = p.getCard(cardId);\n                const winnerCardContent = winnerCard ? winnerCard.content : '';\n                const blackCardContent = this.blackCard ? this.blackCard.content : '';\n                const sentence = blackCardContent.replace('______ ', winnerCardContent);\n                const winnerName = winner ? winner.name : '';\n                const round = new _round__WEBPACK_IMPORTED_MODULE_2__.Round(winnerName, sentence);\n                this.rounds.push(round);\n                if (areDecksEmpty) {\n                    this.stop();\n                }\n                else\n                    this.setMaster(winnerName);\n            }\n        }\n    }\n    setMaster(playerName) {\n        const p = this.players.find((player) => player.name === playerName);\n        if (p) {\n            p.role = 'master';\n            p.currentCardId = '';\n            this.tableCards = [];\n            this.drawBlackCard();\n            this.players.filter((player) => player.name !== playerName).forEach((player) => {\n                player.role = 'player';\n                player.currentCardId = '';\n                this.drawHand(player);\n            });\n        }\n    }\n    isPlayerTurnCompleted() {\n        return !this.findPlayers().find((player) => !player.hasCurrentCard());\n    }\n    findMaster() {\n        return this.players.find(p => p.role === 'master');\n    }\n    findMasterName() {\n        const master = this.findMaster();\n        return master ? master.name : '';\n    }\n    findPlayers() {\n        return this.players.filter(p => p.role === 'player');\n    }\n    getPlayer(playerName) {\n        return this.players.find((player) => player.name === playerName);\n    }\n    isMaster(playerName) {\n        return this.getPlayer(playerName)?.role === 'master';\n    }\n    isPlayer(playerName) {\n        return this.getPlayer(playerName)?.role === 'player';\n    }\n    getRole(playerName) {\n        const p = this.getPlayer(playerName);\n        if (p) {\n            return p.role;\n        }\n        return '';\n    }\n    hasMaster() {\n        return this.players.some(player => player.role === 'master');\n    }\n    getHand(playerName) {\n        const p = this.getPlayer(playerName);\n        if (p) {\n            return p.hand;\n        }\n        return [];\n    }\n    areDecksEmpty() {\n        return this.whiteDeck.length === 0 || this.blackDeck.length === 0;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            status: this.status,\n            whiteDeck: this.whiteDeck.map(c => c.toJSON()),\n            blackDeck: this.blackDeck.map(c => c.toJSON()),\n            blackCard: this.blackCard?.toJSON(),\n            tableCards: this.tableCards.map(c => c.toJSON()),\n            players: this.players.map(c => c.toJSON()),\n            rounds: this.rounds.map(r => r.toJSON())\n        };\n    }\n    static fromJSON(json) {\n        const g = new Game(json.name);\n        g.status = json.status;\n        g.whiteDeck = json.whiteDeck.map((c) => _card__WEBPACK_IMPORTED_MODULE_0__.Card.fromJSON(c));\n        g.blackDeck = json.blackDeck.map((c) => _card__WEBPACK_IMPORTED_MODULE_0__.Card.fromJSON(c));\n        g.blackCard = _card__WEBPACK_IMPORTED_MODULE_0__.Card.fromJSON(json.blackCard);\n        g.tableCards = json.tableCards.map((c) => _card__WEBPACK_IMPORTED_MODULE_0__.Card.fromJSON(c));\n        g.players = json.players.map((p) => _player__WEBPACK_IMPORTED_MODULE_1__.Player.fromJSON(p));\n        g.rounds = json.rounds.map((r) => _round__WEBPACK_IMPORTED_MODULE_2__.Round.fromJSON(r));\n        return g;\n    }\n}\n\n\n//# sourceURL=webpack://lit-game/./src/game.ts?");

/***/ }),

/***/ "./src/player.ts":
/*!***********************!*\
  !*** ./src/player.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Player: () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./card */ \"./src/card.ts\");\n\nclass Player {\n    constructor(name, role) {\n        this.name = name;\n        this.role = role;\n        this.hand = [];\n        this.currentCardId = '';\n    }\n    getCard(cardId) {\n        return this.hand.find((card) => card.id === cardId);\n    }\n    hasCard(cardId) {\n        return this.hand.some((card) => card.id === cardId);\n    }\n    hasCards() {\n        return this.hand.length > 0;\n    }\n    getCurrentCard() {\n        return this.getCard(this.currentCardId);\n    }\n    hasCurrentCard() {\n        return this.currentCardId !== '';\n    }\n    removeCard(cardId) {\n        const cardIndex = this.hand.findIndex((card) => card.id === cardId);\n        if (cardIndex !== -1) {\n            this.hand.splice(cardIndex, 1);\n        }\n    }\n    removeCurrentCard() {\n        const card = this.getCurrentCard();\n        if (card) {\n            this.removeCard(card.id);\n        }\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            role: this.role,\n            hand: this.hand.map(c => c.toJSON()),\n            currentCardId: this.currentCardId,\n        };\n    }\n    static fromJSON(json) {\n        const p = new Player(json.name, json.role);\n        p.hand = json.hand.map((c) => _card__WEBPACK_IMPORTED_MODULE_0__.Card.fromJSON(c));\n        p.currentCardId = json.currentCardId;\n        return p;\n    }\n}\n\n\n//# sourceURL=webpack://lit-game/./src/player.ts?");

/***/ }),

/***/ "./src/round.ts":
/*!**********************!*\
  !*** ./src/round.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Round: () => (/* binding */ Round)\n/* harmony export */ });\nclass Round {\n    constructor(winnerName, sentence) {\n        this.winnerName = winnerName;\n        this.sentence = sentence;\n    }\n    toJSON() {\n        return {\n            winnerName: this.winnerName,\n            sentence: this.sentence,\n        };\n    }\n    static fromJSON(json) {\n        const r = new Round(json.winnerName, json.sentence);\n        return r;\n    }\n}\n\n\n//# sourceURL=webpack://lit-game/./src/round.ts?");

/***/ }),

/***/ "./src/store-service.ts":
/*!******************************!*\
  !*** ./src/store-service.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreService: () => (/* binding */ StoreService)\n/* harmony export */ });\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./firebase */ \"./src/firebase.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./game */ \"./src/game.ts\");\n\n\n\nclass StoreService {\n    static saveGame(game) {\n        const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_0__.db, 'global', 'currentGame');\n        (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(docRef, game.toJSON());\n        console.log('saved');\n    }\n    static onGameUpdate(cb) {\n        const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_0__.db, 'global', 'currentGame');\n        (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.onSnapshot)(docRef, (docSnapshot) => {\n            if (docSnapshot.exists()) {\n                const game = _game__WEBPACK_IMPORTED_MODULE_2__.Game.fromJSON(docSnapshot.data());\n                cb(game);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://lit-game/./src/store-service.ts?");

/***/ })

}]);